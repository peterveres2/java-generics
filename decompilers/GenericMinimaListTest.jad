// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   GenericMinimaListTest.java

package com.epam.generics.list;

import com.epam.generics.list.comparator.Lorry;
import com.epam.generics.list.comparator.LorryByLoadComparator;
import java.io.PrintStream;
import java.util.Iterator;
import org.hamcrest.CoreMatchers;
import org.junit.Assert;

// Referenced classes of package com.epam.generics.list:
//            GenericMinimaList

public class GenericMinimaListTest
{

    public GenericMinimaListTest()
    {
    }

    public void testNewArrayIsEmpty()
    {
        assertEmpty();
    }

    private void assertEmpty()
    {
        Assert.assertThat(Boolean.valueOf(listUnderTest.isEmpty()), CoreMatchers.is(Boolean.valueOf(true)));
        Assert.assertThat(Integer.valueOf(listUnderTest.size()), CoreMatchers.is(Integer.valueOf(0)));
    }

    public void testAdd()
    {
        listUnderTest.add("hello");
        Assert.assertThat(Boolean.valueOf(listUnderTest.isEmpty()), CoreMatchers.is(Boolean.valueOf(false)));
        Assert.assertThat(Integer.valueOf(listUnderTest.size()), CoreMatchers.is(Integer.valueOf(1)));
    }

    public void testClear()
    {
        listUnderTest.add("hello");
        listUnderTest.clear();
        assertEmpty();
    }

    public void testAddAll()
    {
        listUnderTest.add("Hello");
        listUnderTest.add("world!");
        GenericMinimaList more = new GenericMinimaList();
        more.add("Java");
        more.add("is");
        more.add("cool.");
        listUnderTest.addAll(more);
        Assert.assertThat(listUnderTest.toString(), CoreMatchers.is("[Hello, world!, Java, is, cool.]"));
    }

    public void testAddAllWithSubtype()
    {
        GenericMinimaList numbers = new GenericMinimaList();
        numbers.add(Integer.valueOf(1));
        numbers.add(Float.valueOf(2.0F));
        GenericMinimaList more = new GenericMinimaList();
        more.add(Double.valueOf(3D));
        numbers.addAll(more);
        Assert.assertThat(numbers.toString(), CoreMatchers.is("[1, 2.0, 3.0]"));
    }

    public void testIterator()
    {
        listUnderTest.add("hello");
        Iterator iterator = listUnderTest.iterator();
        Assert.assertThat(Boolean.valueOf(iterator.hasNext()), CoreMatchers.is(Boolean.valueOf(true)));
        Assert.assertEquals("hello", iterator.next());
        Assert.assertThat(Boolean.valueOf(iterator.hasNext()), CoreMatchers.is(Boolean.valueOf(false)));
        System.out.println((new StringBuilder("Should fail: ")).append((String)iterator.next()).toString());
    }

    public void testEquals()
    {
        listUnderTest.add("hello");
        listUnderTest.add("world");
        GenericMinimaList other = new GenericMinimaList();
        other.add("hello");
        Assert.assertThat(Boolean.valueOf(listUnderTest.equals(other)), CoreMatchers.is(Boolean.valueOf(false)));
        other.add("world");
        Assert.assertThat(Boolean.valueOf(listUnderTest.equals(other)), CoreMatchers.is(Boolean.valueOf(true)));
    }

    public void testToArray()
    {
        listUnderTest.add("hello");
        listUnderTest.add("world");
        String array[] = (String[])listUnderTest.toArray();
        Assert.assertThat(Integer.valueOf(array.length), CoreMatchers.is(Integer.valueOf(2)));
        Assert.assertEquals("hello", array[0]);
        Assert.assertEquals("world", array[1]);
    }

    public void testSortLorriesBySpeed()
    {
        Lorry smallTruck = new Lorry(300, 500, 5000);
        Lorry midTruck = new Lorry(500, 700, 8000);
        Lorry bigTruck = new Lorry(1000, 1000, 12000);
        GenericMinimaList lorries = new GenericMinimaList();
        lorries.add(midTruck);
        lorries.add(bigTruck);
        lorries.add(smallTruck);
        lorries.sort(new LorryByLoadComparator());
        Assert.assertEquals(smallTruck, lorries.get(0));
        Assert.assertEquals(midTruck, lorries.get(1));
        Assert.assertEquals(bigTruck, lorries.get(2));
    }

    public void testAddDoublesToNumberList()
    {
        GenericMinimaList numbers = new GenericMinimaList();
        numbers.add(Integer.valueOf(1));
        numbers.add(Float.valueOf(2.0F));
        numbers.add(Double.valueOf(3D));
        Assert.assertEquals(Integer.valueOf(1), numbers.get(0));
        Assert.assertEquals(Float.valueOf(2.0F), numbers.get(1));
        Assert.assertEquals(Double.valueOf(3D), numbers.get(2));
        GenericMinimaList doubles = new GenericMinimaList();
        doubles.add(Double.valueOf(4D));
        numbers.addAll(doubles);
        Assert.assertEquals(Double.valueOf(4D), numbers.get(3));
    }

    private final GenericMinimaList listUnderTest = new GenericMinimaList();
}
