// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   GenericMinimaList.java

package com.epam.generics.list;

import java.util.*;

public class GenericMinimaList
    implements Iterable
{
    private class SimpleIterator
        implements Iterator
    {

        public boolean hasNext()
        {
            return myCurrentIndex < size();
        }

        public Object next()
        {
            if(!hasNext())
            {
                throw new NoSuchElementException();
            } else
            {
                Object item = get(myCurrentIndex);
                myCurrentIndex++;
                return item;
            }
        }

        public void remove()
        {
            throw new UnsupportedOperationException();
        }

        private int myCurrentIndex;
        final GenericMinimaList this$0;

        private SimpleIterator()
        {
            this$0 = GenericMinimaList.this;
            super();
            myCurrentIndex = 0;
        }

        SimpleIterator(SimpleIterator simpleiterator)
        {
            this();
        }
    }


    public GenericMinimaList()
    {
        myElementCount = 0;
    }

    public void add(Object o)
    {
        myArray[myElementCount] = o;
        myElementCount++;
    }

    public void clear()
    {
        myElementCount = 0;
    }

    public void addAll(GenericMinimaList otherList)
    {
        Object o;
        for(Iterator iterator = otherList.iterator(); iterator.hasNext(); add(o))
            o = iterator.next();

    }

    public boolean isEmpty()
    {
        return myElementCount == 0;
    }

    public int size()
    {
        return myElementCount;
    }

    public Object get(int position)
    {
        return myArray[position];
    }

    public Iterator iterator()
    {
        return new SimpleIterator(null);
    }

    public String toString()
    {
        StringBuilder s = new StringBuilder("[");
        for(Iterator i = iterator(); i.hasNext();)
        {
            s.append(i.next());
            if(i.hasNext())
                s.append(", ");
        }

        s.append("]");
        return s.toString();
    }

    public Object[] toArray()
    {
        Object copy[] = new Object[myElementCount];
        System.arraycopy(((Object) (myArray)), 0, ((Object) (copy)), 0, myElementCount);
        return copy;
    }

    public boolean equals(Object other)
    {
        boolean areTheSame = false;
        if(other instanceof GenericMinimaList)
        {
            GenericMinimaList otherList = (GenericMinimaList)other;
            areTheSame = Arrays.deepEquals(myArray, otherList.myArray);
        }
        return areTheSame;
    }

    public int hashCode()
    {
        int hash = myElementCount;
        for(int i = 0; i < myElementCount; i++)
        {
            Object item = myArray[i];
            if(item != null)
                hash ^= item.hashCode();
        }

        return hash;
    }

    public void sort(Comparator comparator)
    {
        Arrays.sort(myArray, 0, myElementCount, comparator);
    }

    private final Object myArray[] = new Object[100];
    private int myElementCount;
}
